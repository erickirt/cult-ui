{
  "name": "animated-number",
  "description": "Number component with smooth counting animations and customizable formatting",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "name": "animated-number.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { MotionValue, motion, useSpring, useTransform } from \"motion/react\"\n\ninterface AnimatedNumberProps {\n  value: number\n  mass?: number\n  stiffness?: number\n  damping?: number\n  precision?: number\n  format?: (value: number) => string\n  onAnimationStart?: () => void\n  onAnimationComplete?: () => void\n}\n\nexport function AnimatedNumber({\n  value,\n  mass = 0.8,\n  stiffness = 75,\n  damping = 15,\n  precision = 0,\n  format = (num) => num.toLocaleString(),\n  onAnimationStart,\n  onAnimationComplete,\n}: AnimatedNumberProps) {\n  const [isClient, setIsClient] = useState(false)\n  const [displayValue, setDisplayValue] = useState(format(value))\n\n  // Handle SSR and client-side hydration\n  useEffect(() => {\n    setIsClient(true)\n  }, [])\n\n  // Fallback for SSR or when motion is not available\n  if (!isClient) {\n    return <span>{format(value)}</span>\n  }\n\n  try {\n    const spring = useSpring(value, { mass, stiffness, damping })\n    const display: MotionValue<string> = useTransform(spring, (current) =>\n      format(parseFloat(current.toFixed(precision)))\n    )\n\n    useEffect(() => {\n      spring.set(value)\n      if (onAnimationStart) onAnimationStart()\n      const unsubscribe = spring.on(\"change\", () => {\n        if (spring.get() === value && onAnimationComplete) onAnimationComplete()\n      })\n      return () => unsubscribe()\n    }, [spring, value, onAnimationStart, onAnimationComplete])\n\n    return <motion.span>{display}</motion.span>\n  } catch (error) {\n    // Fallback to simple state-based animation if motion fails\n    useEffect(() => {\n      setDisplayValue(format(value))\n      if (onAnimationStart) onAnimationStart()\n      if (onAnimationComplete) onAnimationComplete()\n    }, [value, format, onAnimationStart, onAnimationComplete])\n\n    return <span>{displayValue}</span>\n  }\n}\n"
    }
  ],
  "type": "registry:ui"
}